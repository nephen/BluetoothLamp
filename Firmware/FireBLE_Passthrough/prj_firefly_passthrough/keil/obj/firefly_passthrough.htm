<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\firefly_passthrough.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\firefly_passthrough.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Jan 19 22:03:28 2016
<BR><P>
<H3>Maximum Stack Usage =        648 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[11]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">BLE_IRQHandler</a> from lib.o(i.BLE_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">CALIB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">COMPARATOR0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">COMPARATOR1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIO_IRQHandler</a> from gpio.o(i.GPIO_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">I2C_IRQHandler</a> from i2c.o(i.I2C_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">OSC_EN_IRQHandler</a> from sleep.o(i.OSC_EN_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[21]">PWM0_IRQHandler</a> from pwm.o(i.PWM0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[22]">PWM1_IRQHandler</a> from pwm.o(i.PWM1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">RTC_CAP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">SPI0_RX_IRQHandler</a> from spi.o(i.SPI0_RX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[15]">SPI0_TX_IRQHandler</a> from spi.o(i.SPI0_TX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1a]">SPI1_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">SPI1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1e]">TIMER2_IRQHandler</a> from timer.o(i.TIMER2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1f]">TIMER3_IRQHandler</a> from timer.o(i.TIMER3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[24]">TUNER_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">TUNER_SETTING_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">TUNER_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">UART0_RX_IRQHandler</a> from uart.o(i.UART0_RX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART0_TX_IRQHandler</a> from uart.o(i.UART0_TX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[18]">UART1_RX_IRQHandler</a> from uart.o(i.UART1_RX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[17]">UART1_TX_IRQHandler</a> from uart.o(i.UART1_TX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">WDT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[2a]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[53]">app_32k_xtal_wakeup_timer</a> from app_task.o(i.app_32k_xtal_wakeup_timer) referenced from app_task.o(.constdata)
 <LI><a href="#[52]">app_com_at_baudrate_change_handler</a> from app_com.o(i.app_com_at_baudrate_change_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[2f]">app_com_at_command_handler</a> from app_com.o(i.app_com_at_command_handler) referenced from app_com.o(i.com_gpio_init)
 <LI><a href="#[51]">app_com_at_rx_enable_handler</a> from app_com.o(i.app_com_at_rx_enable_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4f]">app_com_rx_timeout_handler</a> from app_com.o(i.app_com_rx_timeout_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[50]">app_com_uart_rx_done_ind_handler</a> from app_com.o(i.app_com_uart_rx_done_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6f]">app_diss_create_db_cfm_handler</a> from app_diss_task.o(i.app_diss_create_db_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[70]">app_diss_error_ind_handler</a> from app_diss_task.o(i.app_diss_error_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[2e]">app_event_at_enable_press_handler</a> from app_com.o(i.app_event_at_enable_press_handler) referenced from app_com.o(i.com_gpio_init)
 <LI><a href="#[35]">app_event_com_tx_handler</a> from app_com.o(i.app_event_com_tx_handler) referenced from app_com.o(i.com_uart_write)
 <LI><a href="#[75]">app_fireble_create_db_cfm_handler</a> from app_fireble_task.o(i.app_fireble_create_db_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[71]">app_fireble_disable_ind_handler</a> from app_fireble_task.o(i.app_fireble_disable_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[72]">app_fireble_error_ind_handler</a> from app_fireble_task.o(i.app_fireble_error_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[74]">app_fireble_receive_data_ind_handler</a> from app_fireble_task.o(i.app_fireble_receive_data_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[73]">app_fireble_send_data_cfm_handler</a> from app_fireble_task.o(i.app_fireble_send_data_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[55]">app_gap_adv_intv_update_timer_handler</a> from usr_design.o(i.app_gap_adv_intv_update_timer_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5c]">app_gap_adv_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_adv_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[64]">app_gap_bond_req_cmp_ind_handler</a> from app_gap_task.o(i.app_gap_bond_req_cmp_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[63]">app_gap_bond_req_ind_handler</a> from app_gap_task.o(i.app_gap_bond_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5f]">app_gap_change_param_req_cmp_handler</a> from app_gap_task.o(i.app_gap_change_param_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[62]">app_gap_discon_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_discon_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[61]">app_gap_le_create_conn_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_le_create_conn_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5d]">app_gap_param_update_resp_handler</a> from app_gap_task.o(i.app_gap_param_update_resp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[59]">app_gap_read_bdaddr_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_read_bdaddr_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[58]">app_gap_read_ver_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_read_ver_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5a]">app_gap_ready_evt_handler</a> from app_gap_task.o(i.app_gap_ready_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[56]">app_gap_reset_req_cmp_handler</a> from app_gap_task.o(i.app_gap_reset_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5b]">app_gap_set_devname_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_devname_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[60]">app_gap_set_mode_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_mode_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[5e]">app_gap_set_privacy_req_cmp_handler</a> from app_gap_task.o(i.app_gap_set_privacy_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[65]">app_gap_set_random_add_req_cmp_handler</a> from app_gap_task.o(i.app_gap_set_random_add_req_cmp_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[57]">app_gap_set_sec_req_cmp_evt_handler</a> from app_gap_task.o(i.app_gap_set_sec_req_cmp_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[66]">app_gatt_resource_access_req_handler</a> from app_gap_task.o(i.app_gatt_resource_access_req_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[54]">app_led_timer_handler</a> from usr_design.o(i.app_led_timer_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[7d]">app_otas_start_handler</a> from app_otas_task.o(i.app_otas_start_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[79]">app_qpps_cfg_indntf_ind_handler</a> from app_qpps_task.o(i.app_qpps_cfg_indntf_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[7b]">app_qpps_create_db_cfm_handler</a> from app_qpps_task.o(i.app_qpps_create_db_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[7a]">app_qpps_data_ind_handler</a> from app_qpps_task.o(i.app_qpps_data_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[78]">app_qpps_data_send_cfm_handler</a> from app_qpps_task.o(i.app_qpps_data_send_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[76]">app_qpps_disable_ind_handler</a> from app_qpps_task.o(i.app_qpps_disable_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[77]">app_qpps_error_ind_handler</a> from app_qpps_task.o(i.app_qpps_error_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[7c]">app_qpps_test_send_timer_handler</a> from usr_design.o(i.app_qpps_test_send_timer_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6c]">app_smpc_chk_bd_addr_req_ind_handler</a> from app_smp_task.o(i.app_smpc_chk_bd_addr_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6b]">app_smpc_irk_req_ind_handler</a> from app_smp_task.o(i.app_smpc_irk_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[68]">app_smpc_key_ind_handler</a> from app_smp_task.o(i.app_smpc_key_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6a]">app_smpc_ltk_req_ind_handler</a> from app_smp_task.o(i.app_smpc_ltk_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6d]">app_smpc_sec_started_ind_handler</a> from app_smp_task.o(i.app_smpc_sec_started_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[6e]">app_smpc_timeout_evt_handler</a> from app_smp_task.o(i.app_smpc_timeout_evt_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[69]">app_smpc_tk_req_ind_handler</a> from app_smp_task.o(i.app_smpc_tk_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[67]">app_smpm_set_key_cfm_handler</a> from app_smp_task.o(i.app_smpm_set_key_cfm_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[4e]">app_uart_data_ind_handler</a> from app_task.o(i.app_uart_data_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[43]">atts_req_error_ind_handler_patch</a> from lib.o(i.atts_req_error_ind_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[49]">ble_adv</a> from at_command.o(i.ble_adv) referenced from at_command.o(.constdata)
 <LI><a href="#[48]">ble_discon</a> from at_command.o(i.ble_discon) referenced from at_command.o(.constdata)
 <LI><a href="#[4c]">ble_gpio</a> from at_command.o(i.ble_gpio) referenced from at_command.o(.constdata)
 <LI><a href="#[4b]">ble_i2c</a> from at_command.o(i.ble_i2c) referenced from at_command.o(.constdata)
 <LI><a href="#[4a]">ble_pwm</a> from at_command.o(i.ble_pwm) referenced from at_command.o(.constdata)
 <LI><a href="#[4d]">ble_spi</a> from at_command.o(i.ble_spi) referenced from at_command.o(.constdata)
 <LI><a href="#[31]">com_event_uart_rx_frame_handler</a> from app_com.o(i.com_event_uart_rx_frame_handler) referenced from app_com.o(i.com_init)
 <LI><a href="#[32]">com_event_uart_rx_timeout_handler</a> from app_com.o(i.com_event_uart_rx_timeout_handler) referenced from app_com.o(i.com_init)
 <LI><a href="#[30]">com_tx_done</a> from app_com.o(i.com_tx_done) referenced from app_com.o(i.com_init)
 <LI><a href="#[33]">com_uart_at</a> from app_com.o(i.com_uart_at) referenced from app_com.o(i.com_uart_at)
 <LI><a href="#[33]">com_uart_at</a> from app_com.o(i.com_uart_at) referenced from app_com.o(i.com_uart_at_rx_start)
 <LI><a href="#[34]">com_uart_rx</a> from app_com.o(i.com_uart_rx) referenced from app_com.o(i.com_uart_rx)
 <LI><a href="#[34]">com_uart_rx</a> from app_com.o(i.com_uart_rx) referenced from app_com.o(i.com_uart_rx_start)
 <LI><a href="#[3c]">default_enter_sleep_cb</a> from lib.o(i.default_enter_sleep_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[3d]">default_exit_sleep_cb</a> from lib.o(i.default_exit_sleep_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[84]">diss_create_db_req_handler</a> from diss_task.o(i.diss_create_db_req_handler) referenced from diss_task.o(.constdata)
 <LI><a href="#[86]">diss_enable_req_handler</a> from diss_task.o(i.diss_enable_req_handler) referenced from diss_task.o(.constdata)
 <LI><a href="#[85]">diss_set_char_val_req_handler</a> from diss_task.o(i.diss_set_char_val_req_handler) referenced from diss_task.o(.constdata)
 <LI><a href="#[88]">fireble_create_db_req_handler</a> from fireble_task.o(i.fireble_create_db_req_handler) referenced from fireble_task.o(.constdata)
 <LI><a href="#[89]">fireble_enable_req_handler</a> from fireble_task.o(i.fireble_enable_req_handler) referenced from fireble_task.o(.constdata)
 <LI><a href="#[8a]">fireble_out_ch_send_data_req_handler</a> from fireble_task.o(i.fireble_out_ch_send_data_req_handler) referenced from fireble_task.o(.constdata)
 <LI><a href="#[3a]">foo1</a> from lib.o(i.foo1) referenced from lib.o(i.plf_init)
 <LI><a href="#[83]">gap_discon_cmp_evt_handler</a> from qpps_task.o(i.gap_discon_cmp_evt_handler) referenced 3 times from qpps_task.o(.constdata)
 <LI><a href="#[2d]">gap_discon_ind_handler_patch</a> from lib.o(i.gap_discon_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[82]">gatt_notify_cmp_evt_handler</a> from qpps_task.o(i.gatt_notify_cmp_evt_handler) referenced 3 times from qpps_task.o(.constdata)
 <LI><a href="#[41]">gatt_read_char_req_handler_patch</a> from lib.o(i.gatt_read_char_req_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[42]">gatt_write_char_req_handler_patch</a> from lib.o(i.gatt_write_char_req_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[81]">gatt_write_cmd_ind_handler</a> from qpps_task.o(i.gatt_write_cmd_ind_handler) referenced 3 times from qpps_task.o(.constdata)
 <LI><a href="#[47]">get_name</a> from at_command.o(i.get_name) referenced from at_command.o(.constdata)
 <LI><a href="#[46]">get_version</a> from at_command.o(i.get_version) referenced from at_command.o(.constdata)
 <LI><a href="#[29]">gpio_interrupt_callback</a> from usr_design.o(i.gpio_interrupt_callback) referenced from system.o(i.SystemInit)
 <LI><a href="#[29]">gpio_interrupt_callback</a> from usr_design.o(i.gpio_interrupt_callback) referenced from system.o(i.all_gpio_test)
 <LI><a href="#[2b]">l2cc_data_packet_ind_handler_patch</a> from lib.o(i.l2cc_data_packet_ind_handler_patch) referenced from lib.o(i.ble_init)
 <LI><a href="#[44]">l2cc_data_send_rsp_handler_patch</a> from lib.o(i.l2cc_data_send_rsp_handler_patch) referenced from lib.o(i.task_gatt_desc_register)
 <LI><a href="#[3b]">lld_sleep_lpcycles_2_us</a> from lib.o(i.lld_sleep_lpcycles_2_us) referenced from lib.o(i.plf_init)
 <LI><a href="#[95]">llm_le_enc_cmp_evt_handler</a> from otas_task.o(i.llm_le_enc_cmp_evt_handler) referenced from otas_task.o(.constdata)
 <LI><a href="#[27]">main</a> from app_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[38]">nvds_erase</a> from lib.o(i.nvds_erase) referenced from lib.o(i.plf_init)
 <LI><a href="#[39]">nvds_read</a> from lib.o(i.nvds_read) referenced from lib.o(i.plf_init)
 <LI><a href="#[37]">nvds_write</a> from lib.o(i.nvds_write) referenced from lib.o(i.plf_init)
 <LI><a href="#[93]">ota_control_app_resp_handler</a> from otas_task.o(i.ota_control_app_resp_handler) referenced from otas_task.o(.constdata)
 <LI><a href="#[92]">ota_control_app_resp_timer_handler</a> from otas_task.o(i.ota_control_app_resp_timer_handler) referenced from otas_task.o(.constdata)
 <LI><a href="#[8e]">otas_create_db_req_handler</a> from otas_task.o(i.otas_create_db_req_handler) referenced from otas_task.o(.constdata)
 <LI><a href="#[94]">otas_disable_req_handler</a> from otas_task.o(i.otas_disable_req_handler) referenced from otas_task.o(.constdata)
 <LI><a href="#[8f]">otas_enable_req_handler</a> from otas_task.o(i.otas_enable_req_handler) referenced from otas_task.o(.constdata)
 <LI><a href="#[3e]">plf_reset_cb</a> from lib.o(i.plf_reset_cb) referenced from lib.o(i.plf_init)
 <LI><a href="#[40]">prf_dispatch_disconnect</a> from prf_utils.o(i.prf_dispatch_disconnect) referenced from app_main.o(i.prf_register)
 <LI><a href="#[3f]">prf_init</a> from prf_utils.o(i.prf_init) referenced from app_main.o(i.prf_register)
 <LI><a href="#[7e]">qpps_create_db_req_handler</a> from qpps_task.o(i.qpps_create_db_req_handler) referenced from qpps_task.o(.constdata)
 <LI><a href="#[80]">qpps_data_send_req_handler</a> from qpps_task.o(i.qpps_data_send_req_handler) referenced from qpps_task.o(.constdata)
 <LI><a href="#[7f]">qpps_enable_req_handler</a> from qpps_task.o(i.qpps_enable_req_handler) referenced from qpps_task.o(.constdata)
 <LI><a href="#[45]">set_baudrate</a> from at_command.o(i.set_baudrate) referenced from at_command.o(.constdata)
 <LI><a href="#[36]">sleep_cb</a> from sleep.o(i.sleep_cb) referenced from app_main.o(i.main)
 <LI><a href="#[2c]">smp_rtx_ind_handler_patch</a> from lib.o(i.smp_rtx_ind_handler_patch) referenced from lib.o(i.ble_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[1c8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[96]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ca]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1cb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1cc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1cd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CALIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>COMPARATOR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>COMPARATOR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TUNER_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TUNER_SETTING_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TUNER_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>__rd_ble_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>__wr_ble_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_lmul</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_slot_2_lpcycles
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i_to_array
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_output
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tx_done
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notify_cmp_evt_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_push
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notify_cmp_evt_handler
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_svc_create_db_ext
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pdu_send
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_data_send
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_param_update_req
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_rsp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_rsp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_rsp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_rsp
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_key_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_rx_timeout_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpm_set_key_req
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_local_smp_key
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_conhdl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_add_bonded_dev
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_create_db_req_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_char_val_req
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_send_to_app
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_event_uart_rx_frame_handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enc_cmp_evt_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_svc_create_db_ext
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_packet_ind_handler_patch
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_char_req_handler_patch
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_wrtie
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_start_encrypt_req
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_rsp_to_client
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_create_db_req_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_channel_send_data
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_create_db_req_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gatt_desc_register
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_active_block
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_init
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[192]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_nvds_put
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
</UL>

<P><STRONG><a name="[123]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
</UL>

<P><STRONG><a name="[131]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_command
</UL>

<P><STRONG><a name="[9d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
</UL>

<P><STRONG><a name="[9f]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a1]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a3]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[d]"></a>BLE_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lib.o(i.BLE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE_IRQHandler &rArr; default_exit_sleep_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_ble_reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_ble_reg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_exit_sleep_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>I2C_BYTE_READ</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i2c.o(i.I2C_BYTE_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_BYTE_READ &rArr; i2c_read &rArr; i2c_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
</UL>

<P><STRONG><a name="[a8]"></a>I2C_BYTE_WRITE</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2C_BYTE_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_BYTE_WRITE &rArr; i2c_write &rArr; i2c_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
</UL>

<P><STRONG><a name="[1b]"></a>I2C_IRQHandler</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, i2c.o(i.I2C_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_i2c_SetTXD
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_i2c_ClrIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>OSC_EN_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sleep.o(i.OSC_EN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSC_EN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pwm_ClrIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pwm.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pwm_ClrIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_RX_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, spi.o(i.SPI0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI0_RX_IRQHandler &rArr; spi_rx_int_enable &rArr; spi_spi_SetCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetTXD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_int_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_TX_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, spi.o(i.SPI0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI0_TX_IRQHandler &rArr; spi_tx_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_int_enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_data
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>SystemInit</STRONG> (Thumb, 506 bytes, Stack size 16 bytes, system.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; led_init &rArr; led_set &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clock_off
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_off
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_clock_off
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, uart.o(i.UART0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_RX_IRQHandler &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart.o(i.UART0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_TX_IRQHandler &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, uart.o(i.UART1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_RX_IRQHandler &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart.o(i.UART1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_TX_IRQHandler &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d7]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[e7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_discon
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_command
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_command_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frieble_at_command
</UL>

<P><STRONG><a name="[10c]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at_command.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[d9]"></a>__nvds_get</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lib.o(i.__nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diss_create_db_cfm_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_name
</UL>

<P><STRONG><a name="[dc]"></a>__nvds_put</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lib.o(i.__nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __nvds_put &rArr; patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_nvds_put
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_add_bonded_dev
</UL>

<P><STRONG><a name="[1d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[cf]"></a>all_gpio_test</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, system.o(i.all_gpio_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = all_gpio_test &rArr; gpio_write_pin_field
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin_field
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_5
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPPCR1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPPCR0
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR0
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPDCR
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e6]"></a>app_add_bonded_dev</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, app_util.o(i.app_add_bonded_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_add_bonded_dev &rArr; __nvds_put &rArr; patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
</UL>

<P><STRONG><a name="[f8]"></a>app_clear_local_service_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util.o(i.app_clear_local_service_flag))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_create_db_cfm_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_create_db_cfm_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diss_create_db_cfm_handler
</UL>

<P><STRONG><a name="[52]"></a>app_com_at_baudrate_change_handler</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, app_com.o(i.app_com_at_baudrate_change_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_com_at_baudrate_change_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>app_com_at_command_handler</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, app_com.o(i.app_com_at_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_com_at_command_handler &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pdu_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_command
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_at_rx_start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_com.o(i.com_gpio_init)
</UL>
<P><STRONG><a name="[51]"></a>app_com_at_rx_enable_handler</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_com.o(i.app_com_at_rx_enable_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_com_at_rx_enable_handler &rArr; com_uart_rx_start &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_num
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_com_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>app_com_rx_timeout_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_com.o(i.app_com_rx_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_com_rx_timeout_handler &rArr; uart_rx_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>app_com_uart_rx_done_ind_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, app_com.o(i.app_com_uart_rx_done_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_com_uart_rx_done_ind_handler &rArr; dev_send_to_app &rArr; app_push &rArr; app_qpps_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_send_to_app
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>app_create_server_service_DB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_util.o(i.app_create_server_service_DB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_create_server_service_DB &rArr; app_qpps_create_db
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_create_db
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_create_db
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_create_db
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diss_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[f6]"></a>app_device_setup</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, app_gap_task.o(i.app_device_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_device_setup &rArr; app_gap_set_sec_req
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_ready_evt_handler
</UL>

<P><STRONG><a name="[f2]"></a>app_diss_create_db</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_diss.o(i.app_diss_create_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_diss_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_create_server_service_DB
</UL>

<P><STRONG><a name="[6f]"></a>app_diss_create_db_cfm_handler</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, app_diss_task.o(i.app_diss_create_db_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = app_diss_create_db_cfm_handler &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_clear_local_service_flag
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_char_val_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>app_diss_enable_req</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_diss.o(i.app_diss_enable_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_diss_enable_req
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>

<P><STRONG><a name="[70]"></a>app_diss_error_ind_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_diss_task.o(i.app_diss_error_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_diss_error_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>app_enable_server_service</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, app_util.o(i.app_enable_server_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_enable_server_service &rArr; app_qpps_enable_req
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_enable_req
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_enable_req
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_disable_req
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_enable_req
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diss_enable_req
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[2e]"></a>app_event_at_enable_press_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_com.o(i.app_event_at_enable_press_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_event_at_enable_press_handler &rArr; com_wakeup_handler &rArr; com_uart_rx_start &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_start_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_com.o(i.com_gpio_init)
</UL>
<P><STRONG><a name="[35]"></a>app_event_com_tx_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_com.o(i.app_event_com_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_event_com_tx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_com.o(i.com_uart_write)
</UL>
<P><STRONG><a name="[118]"></a>app_find_bonded_dev</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_util.o(i.app_find_bonded_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_find_bonded_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_lk_sec_status
</UL>

<P><STRONG><a name="[f5]"></a>app_fireble_create_db</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_fireble.o(i.app_fireble_create_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fireble_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_create_server_service_DB
</UL>

<P><STRONG><a name="[75]"></a>app_fireble_create_db_cfm_handler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_fireble_task.o(i.app_fireble_create_db_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_fireble_create_db_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_clear_local_service_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>app_fireble_disable_ind_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, app_fireble_task.o(i.app_fireble_disable_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_fireble_disable_ind_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>app_fireble_enable_req</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, app_fireble.o(i.app_fireble_enable_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fireble_enable_req
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>

<P><STRONG><a name="[72]"></a>app_fireble_error_ind_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_fireble_task.o(i.app_fireble_error_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fireble_error_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>app_fireble_receive_data_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_fireble_task.o(i.app_fireble_receive_data_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_fireble_receive_data_ind_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>app_fireble_send_data_cfm_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_fireble_task.o(i.app_fireble_send_data_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_fireble_send_data_cfm_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>app_gap_adv_intv_update_timer_handler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usr_design.o(i.app_gap_adv_intv_update_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = app_gap_adv_intv_update_timer_handler &rArr; app_set_adv_data &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>app_gap_adv_req_cmp_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_adv_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_adv_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>app_gap_adv_start_req</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, app_gap.o(i.app_gap_adv_start_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_adv_start_req
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[135]"></a>app_gap_adv_stop_req</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_adv_stop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_adv_stop_req
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[64]"></a>app_gap_bond_req_cmp_ind_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_bond_req_cmp_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_gap_bond_req_cmp_ind_handler &rArr; app_add_bonded_dev &rArr; __nvds_put &rArr; patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_add_bonded_dev
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>app_gap_bond_req_ind_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_bond_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_gap_bond_req_ind_handler &rArr; app_gap_bond_resp
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_resp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_conhdl_by_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>app_gap_bond_resp</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, app_gap.o(i.app_gap_bond_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_gap_bond_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_ind_handler
</UL>

<P><STRONG><a name="[5f]"></a>app_gap_change_param_req_cmp_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_change_param_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_change_param_req_cmp_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>app_gap_discon_cmp_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, app_gap_task.o(i.app_gap_discon_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = app_gap_discon_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_conhdl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>app_gap_discon_req</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_discon_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_discon_req
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_discon
</UL>

<P><STRONG><a name="[61]"></a>app_gap_le_create_conn_req_cmp_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_le_create_conn_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_le_create_conn_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_role
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>app_gap_param_update_req</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_gap.o(i.app_gap_param_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gap_param_update_req
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>

<P><STRONG><a name="[5d]"></a>app_gap_param_update_resp_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_param_update_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_param_update_resp_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>app_gap_read_bdaddr_req</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_read_bdaddr_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_read_bdaddr_req
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[59]"></a>app_gap_read_bdaddr_req_cmp_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_read_bdaddr_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_read_bdaddr_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_local_smp_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_create_server_service_DB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>app_gap_read_ver_req</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_read_ver_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_read_ver_req
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[58]"></a>app_gap_read_ver_req_cmp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_read_ver_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_read_ver_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>app_gap_ready_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_ready_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_ready_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_device_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>app_gap_reset_req_cmp_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_reset_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_reset_req_cmp_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>app_gap_set_bondable_mode_req</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_set_bondable_mode_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_set_bondable_mode_req
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpm_set_key_cfm_handler
</UL>

<P><STRONG><a name="[5b]"></a>app_gap_set_devname_req_cmp_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_set_devname_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_set_devname_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>app_gap_set_mode_req_cmp_evt_handler</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, app_gap_task.o(i.app_gap_set_mode_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_gap_set_mode_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>app_gap_set_privacy_req_cmp_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_privacy_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_set_privacy_req_cmp_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>app_gap_set_random_add_req_cmp_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_gap_task.o(i.app_gap_set_random_add_req_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gap_set_random_add_req_cmp_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>app_gap_set_sec_req</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_set_sec_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gap_set_sec_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_device_setup
</UL>

<P><STRONG><a name="[57]"></a>app_gap_set_sec_req_cmp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gap_set_sec_req_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_gap_set_sec_req_cmp_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>app_gatt_resource_access_req_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_gap_task.o(i.app_gatt_resource_access_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gatt_resource_access_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>app_get_bd_addr_by_conhdl</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_util.o(i.app_get_bd_addr_by_conhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_get_bd_addr_by_conhdl
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_link_status_by_conhdl
</UL>

<P><STRONG><a name="[126]"></a>app_get_bond_nb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_util.o(i.app_get_bond_nb))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
</UL>

<P><STRONG><a name="[127]"></a>app_get_bond_status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_util.o(i.app_get_bond_status))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
</UL>

<P><STRONG><a name="[10d]"></a>app_get_conhdl_by_idx</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, app_util.o(i.app_get_conhdl_by_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_get_conhdl_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_link_status_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_ind_handler
</UL>

<P><STRONG><a name="[116]"></a>app_get_link_status_by_idx</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_util.o(i.app_get_link_status_by_idx))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_conhdl_by_idx
</UL>

<P><STRONG><a name="[117]"></a>app_get_lk_sec_status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_util.o(i.app_get_lk_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_get_lk_sec_status &rArr; app_find_bonded_dev
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_find_bonded_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_ind_handler
</UL>

<P><STRONG><a name="[104]"></a>app_get_local_service_flag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_util.o(i.app_get_local_service_flag))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[129]"></a>app_get_role</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_util.o(i.app_get_role))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
</UL>

<P><STRONG><a name="[119]"></a>app_i_to_array</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_util.o(i.app_i_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_i_to_array &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
</UL>

<P><STRONG><a name="[11a]"></a>app_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_env.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = app_init &rArr; app_env_init &rArr; app_gap_init &rArr; app_set_adv_data &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_app_desc_register
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diss_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>app_init_local_smp_key</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_util.o(i.app_init_local_smp_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_init_local_smp_key &rArr; app_smpm_set_key_req
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpm_set_key_req
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[54]"></a>app_led_timer_handler</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, usr_design.o(i.app_led_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_led_timer_handler &rArr; usr_led1_process &rArr; led_set &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>app_ota_ctrl_resp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, otas.o(i.app_ota_ctrl_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_ota_ctrl_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>

<P><STRONG><a name="[f3]"></a>app_otas_create_db</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, otas.o(i.app_otas_create_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_otas_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_create_server_service_DB
</UL>

<P><STRONG><a name="[fd]"></a>app_otas_disable_req</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, otas.o(i.app_otas_disable_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_otas_disable_req
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>

<P><STRONG><a name="[fc]"></a>app_otas_enable_req</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, otas.o(i.app_otas_enable_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_otas_enable_req
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>

<P><STRONG><a name="[7d]"></a>app_otas_start_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_otas_task.o(i.app_otas_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_otas_start_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>app_qpps_cfg_indntf_ind_handler</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_qpps_task.o(i.app_qpps_cfg_indntf_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_qpps_cfg_indntf_ind_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_num
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>app_qpps_create_db</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_qpps.o(i.app_qpps_create_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_qpps_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_create_server_service_DB
</UL>

<P><STRONG><a name="[7b]"></a>app_qpps_create_db_cfm_handler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_qpps_task.o(i.app_qpps_create_db_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_qpps_create_db_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_clear_local_service_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>app_qpps_data_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_qpps_task.o(i.app_qpps_data_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_qpps_data_ind_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>app_qpps_data_send</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, app_qpps.o(i.app_qpps_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_qpps_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tx_done
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_test_send_timer_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_push
</UL>

<P><STRONG><a name="[78]"></a>app_qpps_data_send_cfm_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_qpps_task.o(i.app_qpps_data_send_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_qpps_data_send_cfm_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>app_qpps_disable_ind_handler</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, app_qpps_task.o(i.app_qpps_disable_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_qpps_disable_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>app_qpps_enable_req</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, app_qpps.o(i.app_qpps_enable_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_qpps_enable_req
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_enable_server_service
</UL>

<P><STRONG><a name="[77]"></a>app_qpps_error_ind_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_qpps_task.o(i.app_qpps_error_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_qpps_error_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>app_qpps_test_send_timer_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usr_design.o(i.app_qpps_test_send_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_qpps_test_send_timer_handler &rArr; app_qpps_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_data_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>app_set_adv_data</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, app_util.o(i.app_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_set_adv_data &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[f9]"></a>app_set_char_val_req</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, app_diss.o(i.app_set_char_val_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_set_char_val_req
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diss_create_db_cfm_handler
</UL>

<P><STRONG><a name="[110]"></a>app_set_link_status_by_conhdl</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, app_util.o(i.app_set_link_status_by_conhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_set_link_status_by_conhdl &rArr; app_get_bd_addr_by_conhdl
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bd_addr_by_conhdl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[111]"></a>app_set_role</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_util.o(i.app_set_role))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
</UL>

<P><STRONG><a name="[109]"></a>app_set_scan_rsp_data</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, app_util.o(i.app_set_scan_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_set_scan_rsp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[6c]"></a>app_smpc_chk_bd_addr_req_ind_handler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_chk_bd_addr_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_smpc_chk_bd_addr_req_ind_handler &rArr; app_smpc_chk_bd_addr_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_rsp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_lk_sec_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>app_smpc_chk_bd_addr_req_rsp</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, app_smp.o(i.app_smpc_chk_bd_addr_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_chk_bd_addr_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_chk_bd_addr_req_ind_handler
</UL>

<P><STRONG><a name="[6b]"></a>app_smpc_irk_req_ind_handler</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_irk_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_smpc_irk_req_ind_handler &rArr; app_smpc_irk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_rsp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bond_status
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bond_nb
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>app_smpc_irk_req_rsp</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, app_smp.o(i.app_smpc_irk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_irk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_irk_req_ind_handler
</UL>

<P><STRONG><a name="[68]"></a>app_smpc_key_ind_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_key_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_smpc_key_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>app_smpc_ltk_req_ind_handler</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, app_smp_task.o(i.app_smpc_ltk_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_smpc_ltk_req_ind_handler &rArr; app_smpc_ltk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_role
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_rsp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_find_bonded_dev
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>app_smpc_ltk_req_rsp</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, app_smp.o(i.app_smpc_ltk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpc_ltk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_ltk_req_ind_handler
</UL>

<P><STRONG><a name="[6d]"></a>app_smpc_sec_started_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_sec_started_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_smpc_sec_started_ind_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>app_smpc_timeout_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpc_timeout_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_smpc_timeout_evt_handler &rArr; app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>app_smpc_tk_req_ind_handler</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, app_smp_task.o(i.app_smpc_tk_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_smpc_tk_req_ind_handler &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_rsp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_i_to_array
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>app_smpc_tk_req_rsp</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, app_smp.o(i.app_smpc_tk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_smpc_tk_req_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_tk_req_ind_handler
</UL>

<P><STRONG><a name="[67]"></a>app_smpm_set_key_cfm_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_smp_task.o(i.app_smpm_set_key_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_smpm_set_key_cfm_handler &rArr; app_gap_set_bondable_mode_req
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_bondable_mode_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>app_smpm_set_key_req</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_smp.o(i.app_smpm_set_key_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_smpm_set_key_req
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_local_smp_key
</UL>

<P><STRONG><a name="[107]"></a>app_task_msg_hdl</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, usr_design.o(i.app_task_msg_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_task_msg_hdl &rArr; com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_num
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pdu_send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tx_done
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_ctrl_resp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_role
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_param_update_req
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_timeout_evt_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smpc_sec_started_ind_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_data_send_cfm_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_data_ind_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_cfg_indntf_ind_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_start_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_sec_req_cmp_evt_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_mode_req_cmp_evt_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_devname_req_cmp_evt_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_reset_req_cmp_handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_ready_evt_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_ver_req_cmp_evt_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_read_bdaddr_req_cmp_evt_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_param_update_resp_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_le_create_conn_req_cmp_evt_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_cmp_evt_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_change_param_req_cmp_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_bond_req_cmp_ind_handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_req_cmp_evt_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_send_data_cfm_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_receive_data_ind_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fireble_disable_ind_handler
</UL>

<P><STRONG><a name="[12d]"></a>app_tx_done</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, app_com.o(i.app_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_tx_done &rArr; app_qpps_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_data_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
</UL>

<P><STRONG><a name="[12f]"></a>at_HEXstringToNum</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, at_command.o(i.at_HEXstringToNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = at_HEXstringToNum
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[130]"></a>at_command_length_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, at_command.o(i.at_command_length_get))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_command
</UL>

<P><STRONG><a name="[134]"></a>at_get_parameter</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, at_command.o(i.at_get_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = at_get_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[142]"></a>at_get_parameters_numbers</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at_command.o(i.at_get_parameters_numbers))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
</UL>

<P><STRONG><a name="[e9]"></a>at_process_command</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, at_command.o(i.at_process_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_process_command &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_command_length_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_command_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frieble_at_command
</UL>

<P><STRONG><a name="[132]"></a>atts_svc_create_db_ext</STRONG> (Thumb, 316 bytes, Stack size 104 bytes, lib.o(i.atts_svc_create_db_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_svc_create_db_ext &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_create_db_req_handler
</UL>

<P><STRONG><a name="[49]"></a>ble_adv</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, at_command.o(i.ble_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_adv &rArr; at_HEXstringToNum
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_start_req
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_stop_req
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>ble_channel_send_data</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_fireble.o(i.ble_channel_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_channel_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frieble_at_command
</UL>

<P><STRONG><a name="[48]"></a>ble_discon</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at_command.o(i.ble_discon))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_discon &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_discon_req
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>ble_ext_wakeup_allow</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lib.o(i.ble_ext_wakeup_allow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ble_ext_wakeup_allow
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hw_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_at_wakeup_cb
</UL>

<P><STRONG><a name="[4c]"></a>ble_gpio</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, at_command.o(i.ble_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_gpio &rArr; at_HEXstringToNum
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1WithMask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>ble_hw_sleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i.ble_hw_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>

<P><STRONG><a name="[4b]"></a>ble_i2c</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, at_command.o(i.ble_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_i2c &rArr; at_HEXstringToNum
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1WithMask
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_is_finish
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BYTE_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BYTE_READ
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>ble_init</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, lib.o(i.ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_init &rArr; task_gatt_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_ble_reg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_work_mode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gatt_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>ble_pwm</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, at_command.o(i.ble_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_pwm &rArr; pwm_output &rArr; pwm_config &rArr; pwm_pwm_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_output
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_io_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameters_numbers
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>ble_sleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lib.o(i.ble_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_sleep &rArr; fw_ble_sleep &rArr; rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>ble_spi</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, at_command.o(i.ble_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_spi &rArr; at_HEXstringToNum
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_tran
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameters_numbers
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>check_ble_wakeup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i.check_ble_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_ble_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_ble_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[183]"></a>co_buf_rx_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i.co_buf_rx_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_packet_ind_handler_patch
</UL>

<P><STRONG><a name="[31]"></a>com_event_uart_rx_frame_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_com.o(i.com_event_uart_rx_frame_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = com_event_uart_rx_frame_handler &rArr; uart_rx_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_com.o(i.com_init)
</UL>
<P><STRONG><a name="[32]"></a>com_event_uart_rx_timeout_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_com.o(i.com_event_uart_rx_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = com_event_uart_rx_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_com.o(i.com_init)
</UL>
<P><STRONG><a name="[14c]"></a>com_gpio_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_com.o(i.com_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_gpio_init &rArr; gpio_wakeup_config &rArr; gpio_set_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_enable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[11e]"></a>com_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_com.o(i.com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_init &rArr; com_gpio_init &rArr; gpio_wakeup_config &rArr; gpio_set_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_com_mode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[e8]"></a>com_pdu_send</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_com.o(i.com_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = com_pdu_send &rArr; com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_push
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_command_handler
</UL>

<P><STRONG><a name="[30]"></a>com_tx_done</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_com.o(i.com_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_tx_done &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_com.o(i.com_init)
</UL>
<P><STRONG><a name="[33]"></a>com_uart_at</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app_com.o(i.com_uart_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_uart_at &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_com.o(i.com_uart_at)
<LI> app_com.o(i.com_uart_at_rx_start)
</UL>
<P><STRONG><a name="[ea]"></a>com_uart_at_rx_start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_com.o(i.com_uart_at_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_uart_at_rx_start &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_command_handler
</UL>

<P><STRONG><a name="[34]"></a>com_uart_rx</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_com.o(i.com_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_uart_rx &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_com.o(i.com_uart_rx)
<LI> app_com.o(i.com_uart_rx_start)
</UL>
<P><STRONG><a name="[ed]"></a>com_uart_rx_start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_com.o(i.com_uart_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_uart_rx_start &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_rx_enable_handler
</UL>

<P><STRONG><a name="[150]"></a>com_uart_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_com.o(i.com_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_done
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_push
</UL>

<P><STRONG><a name="[106]"></a>com_wakeup_handler</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, app_com.o(i.com_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = com_wakeup_handler &rArr; com_uart_rx_start &rArr; uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_num
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_at_rx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_at_enable_press_handler
</UL>

<P><STRONG><a name="[141]"></a>config_work_mode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lib.o(i.config_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_work_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[154]"></a>dc_dc_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib.o(i.dc_dc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dc_dc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>delay_5</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, system.o(i.delay_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_5
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
</UL>

<P><STRONG><a name="[f0]"></a>dev_send_to_app</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, app_com.o(i.dev_send_to_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dev_send_to_app &rArr; app_push &rArr; app_qpps_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_num
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_push
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_uart_rx_done_ind_handler
</UL>

<P><STRONG><a name="[15c]"></a>diss_check_val_len</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, diss.o(i.diss_check_val_len))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_char_val_req_handler
</UL>

<P><STRONG><a name="[158]"></a>diss_compute_cfg_flag</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diss.o(i.diss_compute_cfg_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = diss_compute_cfg_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler
</UL>

<P><STRONG><a name="[16e]"></a>diss_disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, diss.o(i.diss_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = diss_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[15a]"></a>diss_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diss.o(i.diss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = diss_init &rArr; task_diss_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_diss_desc_register
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[15d]"></a>enter_sleep</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, sleep.o(i.enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enter_sleep &rArr; sleep_post_process
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dbg_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>fireble_disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fireble.o(i.fireble_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fireble_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[164]"></a>fireble_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fireble.o(i.fireble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fireble_init &rArr; task_fireble_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fireble_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[166]"></a>fireble_out_ch_data_cfm_send</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fireble.o(i.fireble_out_ch_data_cfm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fireble_out_ch_data_cfm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notify_cmp_evt_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_out_ch_send_data_req_handler
</UL>

<P><STRONG><a name="[3a]"></a>foo1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.foo1))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[16b]"></a>frieble_at_command</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, fireble_task.o(i.frieble_at_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = frieble_at_command &rArr; at_process_command &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_command
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_channel_send_data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
</UL>

<P><STRONG><a name="[148]"></a>fw_ble_sleep</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lib.o(i.fw_ble_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fw_ble_sleep &rArr; rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_ble_reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_ble_reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_slot_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
</UL>

<P><STRONG><a name="[ec]"></a>get_bit_num</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_qpps_task.o(i.get_bit_num))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_cfg_indntf_ind_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_rx_enable_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_send_to_app
</UL>

<P><STRONG><a name="[47]"></a>get_name</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, at_command.o(i.get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_name &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>get_version</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, at_command.o(i.get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_version &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>gpio_enable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.gpio_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
</UL>

<P><STRONG><a name="[c7]"></a>gpio_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[29]"></a>gpio_interrupt_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usr_design.o(i.gpio_interrupt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_interrupt_callback &rArr; usr_at_wakeup_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_at_wakeup_cb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> system.o(i.SystemInit)
<LI> system.o(i.all_gpio_test)
</UL>
<P><STRONG><a name="[c8]"></a>gpio_pull_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gpio.o(i.gpio_pull_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_io_config
</UL>

<P><STRONG><a name="[ca]"></a>gpio_read_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.gpio_read_pin))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_rx_enable_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
</UL>

<P><STRONG><a name="[178]"></a>gpio_read_pin_field</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.gpio_read_pin_field))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
</UL>

<P><STRONG><a name="[13b]"></a>gpio_set_direction</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpio.o(i.gpio_set_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_set_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutEnable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_ClrOutEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_io_conf
</UL>

<P><STRONG><a name="[c9]"></a>gpio_set_direction_field</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(i.gpio_set_direction_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_set_direction_field
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutEnable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_ClrOutEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[177]"></a>gpio_sleep_allowed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.gpio_sleep_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_sleep_allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin_field
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[14d]"></a>gpio_wakeup_config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gpio.o(i.gpio_wakeup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_wakeup_config &rArr; gpio_set_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetIntRisingEdge
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetIntFallingEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
</UL>

<P><STRONG><a name="[13c]"></a>gpio_write_pin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.gpio_write_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_io_conf
</UL>

<P><STRONG><a name="[e3]"></a>gpio_write_pin_field</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.gpio_write_pin_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_write_pin_field
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
</UL>

<P><STRONG><a name="[17d]"></a>i2c_bus_check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, i2c.o(i.i2c_bus_check))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[13d]"></a>i2c_init</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, i2c.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
</UL>

<P><STRONG><a name="[13e]"></a>i2c_is_finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i.i2c_is_finish))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
</UL>

<P><STRONG><a name="[17c]"></a>i2c_polling</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, i2c.o(i.i2c_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_i2c_SetTXD
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_i2c_ClrIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[a7]"></a>i2c_read</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, i2c.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_read &rArr; i2c_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_polling
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_i2c_SetTXD
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BYTE_READ
</UL>

<P><STRONG><a name="[a9]"></a>i2c_write</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, i2c.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_write &rArr; i2c_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_polling
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_i2c_SetTXD
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BYTE_WRITE
</UL>

<P><STRONG><a name="[17f]"></a>is_flash_present</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serialflash.o(i.is_flash_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_flash_present &rArr; read_flash_id &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
</UL>

<P><STRONG><a name="[181]"></a>ke_schedule</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lib.o(i.ke_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ke_schedule &rArr; ke_time
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>ke_time</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i.ke_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_ble_reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_ble_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
</UL>

<P><STRONG><a name="[1c5]"></a>ke_timer_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i.ke_timer_empty))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
</UL>

<P><STRONG><a name="[184]"></a>led_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, led.o(i.led_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_process
</UL>

<P><STRONG><a name="[cb]"></a>led_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_init &rArr; led_set &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[eb]"></a>led_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_set &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_wakeup_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_led1_process
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_rx_enable_handler
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, app_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = main &rArr; plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sleep
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[92]"></a>ota_control_app_resp_timer_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, otas_task.o(i.ota_control_app_resp_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ota_control_app_resp_timer_handler &rArr; rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_cmd_meta_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>otas_control</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, otas.o(i.otas_control))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[199]"></a>otas_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, otas.o(i.otas_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otas_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_disable_req_handler
</UL>

<P><STRONG><a name="[19a]"></a>otas_error_ind_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, otas.o(i.otas_error_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otas_error_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_disable_req_handler
</UL>

<P><STRONG><a name="[19b]"></a>otas_init</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, otas.o(i.otas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otas_init &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_otas_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[171]"></a>otas_proc_data_ind</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, otas.o(i.otas_proc_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = otas_proc_data_ind &rArr; proc_cmd_meta_data_write &rArr; rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_toapp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_meta_data_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_brick_data_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_cmd_flash_check
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_start_decrypt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_active_block
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_calc_flash_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
</UL>

<P><STRONG><a name="[188]"></a>otas_start_encrypt_req</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, otas_task.o(i.otas_start_encrypt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otas_start_encrypt_req
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enc_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_start_decrypt
</UL>

<P><STRONG><a name="[189]"></a>plf_init</STRONG> (Thumb, 614 bytes, Stack size 56 bytes, lib.o(i.plf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = plf_init &rArr; nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetXtalBuckWithMask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>power_off_flash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serialflash.o(i.power_off_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_off_flash &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
</UL>

<P><STRONG><a name="[19d]"></a>power_on_flash</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, serialflash.o(i.power_on_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = power_on_flash &rArr; is_flash_present &rArr; read_flash_id &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_present
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_meta_data_write
</UL>

<P><STRONG><a name="[40]"></a>prf_dispatch_disconnect</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, prf_utils.o(i.prf_dispatch_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prf_dispatch_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.prf_register)
</UL>
<P><STRONG><a name="[3f]"></a>prf_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, prf_utils.o(i.prf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prf_init &rArr; otas_init &rArr; power_on_flash &rArr; is_flash_present &rArr; read_flash_id &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_control
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.prf_register)
</UL>
<P><STRONG><a name="[159]"></a>prf_server_error_ind_send</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, prf_utils.o(i.prf_server_error_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_server_error_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_char_val_req_handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_enable_req_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_enable_req_handler
</UL>

<P><STRONG><a name="[187]"></a>proc_cmd_brick_data_write</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, otas.o(i.proc_cmd_brick_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = proc_cmd_brick_data_write &rArr; write_flash &rArr; flash_write_enable &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_toapp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_rsp_to_client
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enc_cmp_evt_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[186]"></a>proc_cmd_meta_data_write</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, otas.o(i.proc_cmd_meta_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = proc_cmd_meta_data_write &rArr; rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_wait_app_resp_timer
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_toapp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_cmd_meta_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enc_cmp_evt_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[1ae]"></a>pwm_config</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, pwm.o(i.pwm_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pwm_config &rArr; pwm_pwm_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pwm_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_output
</UL>

<P><STRONG><a name="[143]"></a>pwm_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pwm.o(i.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwm_init &rArr; pwm_pwm_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pwm_SetCRWithMask
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
</UL>

<P><STRONG><a name="[144]"></a>pwm_io_config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at_command.o(i.pwm_io_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwm_io_config &rArr; gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1WithMask
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
</UL>

<P><STRONG><a name="[145]"></a>pwm_output</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, at_command.o(i.pwm_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pwm_output &rArr; pwm_config &rArr; pwm_pwm_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
</UL>

<P><STRONG><a name="[16d]"></a>qpps_disable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, qpps.o(i.qpps_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qpps_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_discon_cmp_evt_handler
</UL>

<P><STRONG><a name="[1b1]"></a>qpps_error_ind_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, qpps.o(i.qpps_error_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qpps_error_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_data_send_req_handler
</UL>

<P><STRONG><a name="[1aa]"></a>qpps_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, qpps.o(i.qpps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qpps_init &rArr; task_qpps_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_qpps_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[194]"></a>read_flash</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serialflash.o(i.read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_flash &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ctrl_SetDataLen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_active_block
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_calc_flash_crc
</UL>

<P><STRONG><a name="[180]"></a>read_flash_id</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serialflash.o(i.read_flash_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_flash_id &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_present
</UL>

<P><STRONG><a name="[1b4]"></a>restore_ble_setting</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lib.o(i.restore_ble_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = restore_ble_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_cb
</UL>

<P><STRONG><a name="[195]"></a>rsp_cmd_meta_data_write</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, otas.o(i.rsp_cmd_meta_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_rsp_to_client
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_control_app_resp_timer_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_control_app_resp_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_meta_data_write
</UL>

<P><STRONG><a name="[170]"></a>rsp_pkt_check_error</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, otas.o(i.rsp_pkt_check_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsp_pkt_check_error &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_toapp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_rsp_to_client
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_start_decrypt
</UL>

<P><STRONG><a name="[16c]"></a>rwble_slot_2_lpcycles</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lib.o(i.rwble_slot_2_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwble_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_ble_sleep
</UL>

<P><STRONG><a name="[197]"></a>sector_erase_flash</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, serialflash.o(i.sector_erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sector_erase_flash &rArr; flash_write_enable &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ctrl_SetCmdAddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_brick_data_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_active_block
</UL>

<P><STRONG><a name="[1a1]"></a>send_status_toapp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, otas.o(i.send_status_toapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_status_toapp
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_pkt_check_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_meta_data_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_brick_data_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[45]"></a>set_baudrate</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, at_command.o(i.set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_baudrate &rArr; at_HEXstringToNum
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_parameter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_HEXstringToNum
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>set_dbg_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i.set_dbg_info))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[ee]"></a>show_com_mode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_com.o(i.show_com_mode))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_at_rx_enable_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[36]"></a>sleep_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sleep.o(i.sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleep_cb &rArr; usr_sleep_restore &rArr; uart_tx_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.main)
</UL>
<P><STRONG><a name="[18c]"></a>sleep_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sleep.o(i.sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_init &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>sleep_post_process</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lib.o(i.sleep_post_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleep_post_process
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[1ad]"></a>start_wait_app_resp_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, otas.o(i.start_wait_app_resp_timer))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_meta_data_write
</UL>

<P><STRONG><a name="[c0]"></a>syscon_set_ahb_clk</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_ahb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_ahb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c2]"></a>syscon_set_apb_clk</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_apb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_apb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c1]"></a>syscon_set_ble_clk</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_ble_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_ble_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bf]"></a>syscon_set_sysclk_src</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_sysclk_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = syscon_set_sysclk_src &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c3]"></a>syscon_set_timer_clk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_timer_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_timer_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c4]"></a>syscon_set_usart_clk</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_usart_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_usart_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11b]"></a>task_app_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, app_task.o(i.task_app_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_app_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[15b]"></a>task_diss_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, diss_task.o(i.task_diss_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_diss_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[165]"></a>task_fireble_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fireble_task.o(i.task_fireble_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_fireble_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_init
</UL>

<P><STRONG><a name="[19c]"></a>task_otas_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, otas_task.o(i.task_otas_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_otas_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_init
</UL>

<P><STRONG><a name="[1b2]"></a>task_qpps_desc_register</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, qpps_task.o(i.task_qpps_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_qpps_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_init
</UL>

<P><STRONG><a name="[cc]"></a>uart_init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[151]"></a>uart_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uart.o(i.uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_read &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_start
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_at_rx_start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_at
</UL>

<P><STRONG><a name="[153]"></a>uart_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uart.o(i.uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_write
</UL>

<P><STRONG><a name="[173]"></a>usr_at_wakeup_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usr_design.o(i.usr_at_wakeup_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usr_at_wakeup_cb &rArr; wakeup_32k_xtal_switch_clk &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ext_wakeup_allow
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_callback
</UL>

<P><STRONG><a name="[18b]"></a>usr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usr_design.o(i.usr_init))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>usr_led1_set</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usr_design.o(i.usr_led1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usr_led1_set &rArr; led_set &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_msg_hdl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_adv_intv_update_timer_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv
</UL>

<P><STRONG><a name="[18e]"></a>usr_sleep</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sleep.o(i.usr_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usr_sleep &rArr; gpio_sleep_allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_empty
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>usr_sleep_restore</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usr_design.o(i.usr_sleep_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usr_sleep_restore &rArr; uart_tx_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_cb
</UL>

<P><STRONG><a name="[14a]"></a>usr_spi_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usr_spi.o(i.usr_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usr_spi_init &rArr; usr_spi_io_conf &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_io_conf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
</UL>

<P><STRONG><a name="[1c6]"></a>usr_spi_io_conf</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usr_spi.o(i.usr_spi_io_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usr_spi_io_conf &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_init
</UL>

<P><STRONG><a name="[149]"></a>usr_spi_tran</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usr_spi.o(i.usr_spi_tran))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_spi
</UL>

<P><STRONG><a name="[105]"></a>wakeup_32k_xtal_start_timer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sleep.o(i.wakeup_32k_xtal_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wakeup_32k_xtal_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_at_enable_press_handler
</UL>

<P><STRONG><a name="[1c4]"></a>wakeup_32k_xtal_switch_clk</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sleep.o(i.wakeup_32k_xtal_switch_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wakeup_32k_xtal_switch_clk &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_at_wakeup_cb
</UL>

<P><STRONG><a name="[18d]"></a>wakeup_by_sleep_timer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sleep.o(i.wakeup_by_sleep_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wakeup_by_sleep_timer &rArr; syscon_SetPGCR2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR0WithMask
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>write_flash</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, serialflash.o(i.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_flash &rArr; flash_write_enable &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ctrl_SetDataLen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_brick_data_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_active_block
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18a]"></a>prf_register</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_main.o(i.prf_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_register
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>SystemIOCfg</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, system.o(i.SystemIOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemIOCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPPCR1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPPCR0
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR0
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPDCR
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[157]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_5
</UL>

<P><STRONG><a name="[cd]"></a>dev_allow_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.dev_allow_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bc]"></a>spi_clock_off</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(i.spi_clock_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_clock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[be]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetCRSC))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bd]"></a>syscon_SetCRSS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetCRSS))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clock_off
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_off
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_clock_off
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b6]"></a>syscon_SetPDCR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetPDCR))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
</UL>

<P><STRONG><a name="[c5]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b4]"></a>syscon_SetPMCR0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetPMCR0))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>syscon_SetPMCR1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetPMCR1))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
</UL>

<P><STRONG><a name="[b7]"></a>syscon_SetPPCR0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetPPCR0))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
</UL>

<P><STRONG><a name="[b8]"></a>syscon_SetPPCR1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.syscon_SetPPCR1))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_gpio_test
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
</UL>

<P><STRONG><a name="[ba]"></a>timer_clock_off</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system.o(i.timer_clock_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_clock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bb]"></a>uart_clock_off</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(i.uart_clock_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_clock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ce]"></a>uart_uart_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system.o(i.uart_uart_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1be]"></a>dev_allow_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_design.o(i.dev_allow_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_enable
</UL>

<P><STRONG><a name="[1bd]"></a>uart_rx_enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usr_design.o(i.uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_rx_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
</UL>

<P><STRONG><a name="[1c3]"></a>uart_tx_enable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usr_design.o(i.uart_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_tx_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_sleep_restore
</UL>

<P><STRONG><a name="[1bf]"></a>uart_uart_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usr_design.o(i.uart_uart_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_enable
</UL>

<P><STRONG><a name="[120]"></a>usr_led1_process</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usr_design.o(i.usr_led1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usr_led1_process &rArr; led_set &rArr; gpio_write_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_get
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_timer_handler
</UL>

<P><STRONG><a name="[146]"></a>pwm_enable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at_command.o(i.pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pwm
</UL>

<P><STRONG><a name="[13a]"></a>syscon_SetPMCR1WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_command.o(i.syscon_SetPMCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPMCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_io_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_i2c
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gpio
</UL>

<P><STRONG><a name="[11c]"></a>app_diss_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_env.o(i.app_diss_init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[100]"></a>app_env_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_env.o(i.app_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = app_env_init &rArr; app_gap_init &rArr; app_set_adv_data &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_local_service_flag
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_smp_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[11d]"></a>app_fireble_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_env.o(i.app_fireble_init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[102]"></a>app_gap_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_env.o(i.app_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = app_gap_init &rArr; app_set_adv_data &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_scan_rsp_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
</UL>

<P><STRONG><a name="[103]"></a>app_smp_init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, app_env.o(i.app_smp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = app_smp_init &rArr; __nvds_get &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
</UL>

<P><STRONG><a name="[53]"></a>app_32k_xtal_wakeup_timer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, app_task.o(i.app_32k_xtal_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_32k_xtal_wakeup_timer &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>app_uart_data_ind_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_task.o(i.app_uart_data_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_uart_data_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_task.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_32k_xtal_wakeup_timer
</UL>

<P><STRONG><a name="[121]"></a>app_push</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, app_com.o(i.app_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_push &rArr; app_qpps_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qpps_data_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_send_to_app
</UL>

<P><STRONG><a name="[14f]"></a>com_push</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_com.o(i.com_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_push &rArr; com_uart_write &rArr; uart_write &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pdu_send
</UL>

<P><STRONG><a name="[ef]"></a>uart_rx_int_enable</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, app_com.o(i.uart_rx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_rx_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_com_rx_timeout_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_event_uart_rx_frame_handler
</UL>

<P><STRONG><a name="[152]"></a>uart_uart_ClrIntFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_com.o(i.uart_uart_ClrIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_start
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_at_rx_start
</UL>

<P><STRONG><a name="[83]"></a>gap_discon_cmp_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, qpps_task.o(i.gap_discon_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_discon_cmp_evt_handler &rArr; qpps_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpps_task.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>gatt_notify_cmp_evt_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, qpps_task.o(i.gatt_notify_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gatt_notify_cmp_evt_handler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpps_task.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>gatt_write_cmd_ind_handler</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, qpps_task.o(i.gatt_write_cmd_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gatt_write_cmd_ind_handler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpps_task.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>qpps_create_db_req_handler</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, qpps_task.o(i.qpps_create_db_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qpps_create_db_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpps_task.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>qpps_data_send_req_handler</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, qpps_task.o(i.qpps_data_send_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qpps_data_send_req_handler &rArr; qpps_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qpps_error_ind_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpps_task.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>qpps_enable_req_handler</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, qpps_task.o(i.qpps_enable_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = qpps_enable_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpps_task.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>diss_create_db_req_handler</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, diss_task.o(i.diss_create_db_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = diss_create_db_req_handler &rArr; diss_compute_cfg_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_compute_cfg_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>diss_enable_req_handler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, diss_task.o(i.diss_enable_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = diss_enable_req_handler &rArr; prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>diss_set_char_val_req_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, diss_task.o(i.diss_set_char_val_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = diss_set_char_val_req_handler &rArr; prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_check_val_len
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>gap_discon_cmp_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, diss_task.o(i.gap_discon_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_discon_cmp_evt_handler &rArr; diss_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1c0]"></a>dev_allow_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.dev_allow_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>

<P><STRONG><a name="[1c1]"></a>dev_prevent_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.dev_prevent_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>

<P><STRONG><a name="[1bb]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.syscon_SetCRSC))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d4]"></a>uart_rx_int_enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uart.o(i.uart_rx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>

<P><STRONG><a name="[d6]"></a>uart_tx_int_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(i.uart_tx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TX_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[d3]"></a>uart_uart_ClrIntFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.uart_uart_ClrIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>uart_uart_GetIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.uart_uart_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TX_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[1c2]"></a>uart_uart_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.uart_uart_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>

<P><STRONG><a name="[d5]"></a>uart_uart_SetTXD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.uart_uart_SetTXD))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TX_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>ctz</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gpio.o(i.ctz))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_set
</UL>

<P><STRONG><a name="[175]"></a>gpio_gpio_ClrOutEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.gpio_gpio_ClrOutEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
</UL>

<P><STRONG><a name="[17a]"></a>gpio_gpio_SetIntFallingEdge</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.gpio_gpio_SetIntFallingEdge))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
</UL>

<P><STRONG><a name="[179]"></a>gpio_gpio_SetIntRisingEdge</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.gpio_gpio_SetIntRisingEdge))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
</UL>

<P><STRONG><a name="[176]"></a>gpio_gpio_SetOutEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.gpio_gpio_SetOutEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
</UL>

<P><STRONG><a name="[17b]"></a>gpio_gpio_SetOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.gpio_gpio_SetOutputData))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin_field
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
</UL>

<P><STRONG><a name="[15f]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[161]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[160]"></a>syscon_SetPGCR0WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[1b7]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_32k_xtal_switch_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[15e]"></a>syscon_SetPGCR2WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep.o(i.syscon_SetPGCR2WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR2WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_by_sleep_timer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep
</UL>

<P><STRONG><a name="[1b9]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, syscon.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[1ba]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, syscon.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
</UL>

<P><STRONG><a name="[d1]"></a>timer_timer_ClrIntFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.timer_timer_ClrIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>timer_timer_GetIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.timer_timer_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[ac]"></a>pwm_pwm_ClrIntStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(i.pwm_pwm_ClrIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>pwm_pwm_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(i.pwm_pwm_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_pwm_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config
</UL>

<P><STRONG><a name="[aa]"></a>i2c_i2c_ClrIntStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.i2c_i2c_ClrIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_polling
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>i2c_i2c_SetTXD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.i2c_i2c_SetTXD))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_polling
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>flash_write_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, serialflash.o(i.flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_write_enable &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
</UL>

<P><STRONG><a name="[16a]"></a>is_flash_busy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serialflash.o(i.is_flash_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ctrl_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
</UL>

<P><STRONG><a name="[17e]"></a>sf_ctrl_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serialflash.o(i.sf_ctrl_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sf_ctrl_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_busy
</UL>

<P><STRONG><a name="[1b5]"></a>sf_ctrl_SetCmdAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serialflash.o(i.sf_ctrl_SetCmdAddr))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
</UL>

<P><STRONG><a name="[1b3]"></a>sf_ctrl_SetDataLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serialflash.o(i.sf_ctrl_SetDataLen))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>

<P><STRONG><a name="[1a7]"></a>syscon_SetPGCR2WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serialflash.o(i.syscon_SetPGCR2WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR2WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_flash
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_flash
</UL>

<P><STRONG><a name="[1c7]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_spi.o(i.syscon_SetCRSC))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_spi_init
</UL>

<P><STRONG><a name="[ae]"></a>spi_rx_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(i.spi_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_rx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_RX_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>spi_rx_int_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spi.o(i.spi_rx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_rx_int_enable &rArr; spi_spi_SetCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_RX_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>spi_spi_GetSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.spi_spi_GetSR))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TX_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_RX_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>spi_spi_SetCR0WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(i.spi_spi_SetCR0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_spi_SetCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_int_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_int_enable
</UL>

<P><STRONG><a name="[af]"></a>spi_spi_SetTXD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(i.spi_spi_SetTXD))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_data
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_RX_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>spi_tx_data</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, spi.o(i.spi_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_tx_data
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetTXD
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TX_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>spi_tx_int_enable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi.o(i.spi_tx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_tx_int_enable &rArr; spi_spi_SetCR0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetCR0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TX_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>fireble_create_db_req_handler</STRONG> (Thumb, 838 bytes, Stack size 80 bytes, fireble_task.o(i.fireble_create_db_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fireble_create_db_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fireble_task.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>fireble_enable_req_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fireble_task.o(i.fireble_enable_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fireble_enable_req_handler &rArr; prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fireble_task.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>fireble_out_ch_send_data_req_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fireble_task.o(i.fireble_out_ch_send_data_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fireble_out_ch_send_data_req_handler &rArr; fireble_out_ch_data_cfm_send
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_out_ch_data_cfm_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fireble_task.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>gap_discon_cmp_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fireble_task.o(i.gap_discon_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_discon_cmp_evt_handler &rArr; fireble_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fireble_task.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>gatt_notify_cmp_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fireble_task.o(i.gatt_notify_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gatt_notify_cmp_evt_handler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireble_out_ch_data_cfm_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fireble_task.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>gatt_write_cmd_ind_handler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, fireble_task.o(i.gatt_write_cmd_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gatt_write_cmd_ind_handler &rArr; frieble_at_command &rArr; at_process_command &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frieble_at_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fireble_task.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>ota_calc_flash_crc</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, otas.o(i.ota_calc_flash_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ota_calc_flash_crc &rArr; read_flash &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[196]"></a>ota_set_active_block</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, otas.o(i.ota_set_active_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ota_set_active_block &rArr; write_flash &rArr; flash_write_enable &rArr; is_flash_busy &rArr; sf_ctrl_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[19f]"></a>otas_start_decrypt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, otas.o(i.otas_start_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otas_start_decrypt &rArr; rsp_pkt_check_error &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_start_encrypt_req
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_pkt_check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[1a0]"></a>rsp_cmd_flash_check</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, otas.o(i.rsp_cmd_flash_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsp_cmd_flash_check &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_rsp_to_client
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>

<P><STRONG><a name="[1ac]"></a>transmit_rsp_to_client</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, otas.o(i.transmit_rsp_to_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_pkt_check_error
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_cmd_meta_data_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_brick_data_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_cmd_flash_check
</UL>

<P><STRONG><a name="[de]"></a>__nvds_wrtie</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lib.o(i.__nvds_wrtie))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __nvds_wrtie
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
</UL>

<P><STRONG><a name="[43]"></a>atts_req_error_ind_handler_patch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib.o(i.atts_req_error_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_req_error_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[1a8]"></a>cal_cal_SetCAL0WithMask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i.cal_cal_SetCAL0WithMask))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[1a9]"></a>cal_cal_SetCAL1WithMask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i.cal_cal_SetCAL1WithMask))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[3c]"></a>default_enter_sleep_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i.default_enter_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_enter_sleep_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[3d]"></a>default_exit_sleep_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.default_exit_sleep_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_exit_sleep_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[168]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
</UL>

<P><STRONG><a name="[1a4]"></a>dp_dp_SetRegWithMask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.dp_dp_SetRegWithMask))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_ble_setting
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[db]"></a>flash_on</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lib.o(i.flash_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>

<P><STRONG><a name="[2d]"></a>gap_discon_ind_handler_patch</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lib.o(i.gap_discon_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_discon_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[41]"></a>gatt_read_char_req_handler_patch</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lib.o(i.gatt_read_char_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_read_char_req_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[42]"></a>gatt_write_char_req_handler_patch</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lib.o(i.gatt_write_char_req_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_write_char_req_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[da]"></a>is_flash_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.is_flash_off))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_get
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>

<P><STRONG><a name="[2b]"></a>l2cc_data_packet_ind_handler_patch</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lib.o(i.l2cc_data_packet_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_data_packet_ind_handler_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_buf_rx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[44]"></a>l2cc_data_send_rsp_handler_patch</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lib.o(i.l2cc_data_send_rsp_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_data_send_rsp_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.task_gatt_desc_register)
</UL>
<P><STRONG><a name="[3b]"></a>lld_sleep_lpcycles_2_us</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lib.o(i.lld_sleep_lpcycles_2_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_lpcycles_2_us
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[18f]"></a>nvds_copy</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, lib.o(i.nvds_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_restore_backup
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
</UL>

<P><STRONG><a name="[38]"></a>nvds_erase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib.o(i.nvds_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nvds_erase &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash_patch
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[1a2]"></a>nvds_purge</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lib.o(i.nvds_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_nvds_put
</UL>

<P><STRONG><a name="[39]"></a>nvds_read</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lib.o(i.nvds_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvds_read &rArr; flash_on &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_off
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[191]"></a>nvds_restore_backup</STRONG> (Thumb, 98 bytes, Stack size 272 bytes, lib.o(i.nvds_restore_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = nvds_restore_backup &rArr; nvds_copy &rArr; sector_erase_flash_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[37]"></a>nvds_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lib.o(i.nvds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvds_write &rArr; __nvds_wrtie
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_wrtie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[dd]"></a>patch_nvds_put</STRONG> (Thumb, 368 bytes, Stack size 192 bytes, lib.o(i.patch_nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = patch_nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_put
</UL>

<P><STRONG><a name="[3e]"></a>plf_reset_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i.plf_reset_cb))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.plf_init)
</UL>
<P><STRONG><a name="[1a5]"></a>powerup_calibration</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lib.o(i.powerup_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = powerup_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[190]"></a>sector_erase_flash_patch</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lib.o(i.sector_erase_flash_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sector_erase_flash_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_copy
</UL>

<P><STRONG><a name="[2c]"></a>smp_rtx_ind_handler_patch</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i.smp_rtx_ind_handler_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smp_rtx_ind_handler_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(i.ble_init)
</UL>
<P><STRONG><a name="[155]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i.syscon_SetIvrefX32WithMask))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
</UL>

<P><STRONG><a name="[156]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_post_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[167]"></a>syscon_SetPGCR2WithMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i.syscon_SetPGCR2WithMask))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_on
</UL>

<P><STRONG><a name="[1a3]"></a>syscon_SetXtalBuckWithMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i.syscon_SetXtalBuckWithMask))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[140]"></a>task_gatt_desc_register</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lib.o(i.task_gatt_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_gatt_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[91]"></a>gatt_notify_cmp_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, otas_task.o(i.gatt_notify_cmp_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>gatt_write_cmd_ind_handler</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, otas_task.o(i.gatt_write_cmd_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gatt_write_cmd_ind_handler &rArr; otas_proc_data_ind &rArr; proc_cmd_meta_data_write &rArr; rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_rx_buffer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_pkt_check_error
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_proc_data_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>llm_le_enc_cmp_evt_handler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, otas_task.o(i.llm_le_enc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llm_le_enc_cmp_evt_handler &rArr; proc_cmd_meta_data_write &rArr; rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_start_encrypt_req
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_meta_data_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cmd_brick_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ota_control_app_resp_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, otas_task.o(i.ota_control_app_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ota_control_app_resp_handler &rArr; rsp_cmd_meta_data_write &rArr; transmit_rsp_to_client
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsp_cmd_meta_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>otas_create_db_req_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, otas_task.o(i.otas_create_db_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = otas_create_db_req_handler &rArr; atts_svc_create_db_ext &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_svc_create_db_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>otas_disable_req_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, otas_task.o(i.otas_disable_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = otas_disable_req_handler &rArr; otas_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_error_ind_send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otas_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>otas_enable_req_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, otas_task.o(i.otas_enable_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otas_enable_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otas_task.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>reset_rx_buffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, otas_task.o(i.reset_rx_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_cmd_ind_handler
</UL>

<P><STRONG><a name="[d8]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[e1]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
